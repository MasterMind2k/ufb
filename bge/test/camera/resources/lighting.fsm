in vec4 diffuse, ambient;
in vec3 normal, lightDir, halfVector;

struct LightStruct {
  vec4 position;
  /* Colors */
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  /* Attenuations */
  float constant;
  float linear;
  float quadratic;
  /* Spot properties */
  float spot_cutoff;
  float spot_exponent;
  vec3 spot_direction;
};

struct MaterialStruct {
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  int shininess;
};

uniform LightStruct Lights0;
uniform MaterialStruct Material;

vec4 calculateLighting()
{
  vec3 n, halfV;
  float NdotL, NdotHV;

  vec4 color = ambient;

  n = normalize(normal);

  NdotL = max(dot(n, lightDir), 0.0);

  if (NdotL > 0.0) {
    color += diffuse * NdotL;
    halfV = normalize(halfVector);
    NdotHV = max(dot(n, halfV), 0.0);
    color += Material.specular *
             Lights0.specular *
             pow(NdotHV, Material.shininess);
  }

  return color;
}
