varying vec4 diffuse, ambient;
varying vec3 normal, lightDir, halfVector;

in vec3 in_Vertex;
in vec3 in_Normal;

uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;

struct LightStruct {
  vec4 position;
  /* Colors */
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  /* Attenuations */
  float constant;
  float linear;
  float quadratic;
  /* Spot properties */
  float spot_cutoff;
  float spot_exponent;
  vec3 spot_direction;
};

uniform LightStruct Lights0;

void calculateLighting()
{
  normal = normalize(NormalMatrix * in_Normal);

  lightDir = normalize(vec3(Lights0.position));

  vec3 eye = vec3(0, 0, 1);
  vec4 ecPos = ModelViewMatrix * vec4(in_Vertex, 1.0);
  halfVector = normalize(eye + lightDir);

  diffuse = gl_FrontMaterial.diffuse * Lights0.diffuse;
  ambient = gl_FrontMaterial.ambient * Lights0.ambient;
  ambient += gl_LightModel.ambient * gl_FrontMaterial.ambient;
}
