in vec4 diffuse0, diffuse1, diffuse2, diffuse3;
in vec4 ambientGlobal;
in vec4 ambient0, ambient1, ambient2, ambient3;

in vec3 normal;
in vec3 lightDir0, lightDir1, lightDir2, lightDir3;
in vec3 halfVector0, halfVector1, halfVector2, halfVector3;

in float dist0, dist1, dist2, dist3;

struct LightStruct {
  vec4 position;
  /* Colors */
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  /* Attenuations */
  float constant;
  float linear;
  float quadratic;
  /* Spot properties */
  float spot_cutoff;
  float spot_exponent;
  vec3 spot_direction;
};

struct MaterialStruct {
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  int shininess;
};

uniform LightStruct Lights0;
uniform LightStruct Lights1;
uniform LightStruct Lights2;
uniform LightStruct Lights3;
uniform int UsedLights;
uniform MaterialStruct Material;

vec4 light0(in vec3 n)
{
  vec3 halfV, viewV, ldir;
  float NdotL, NdotHV;
  float att, spotEffect;
  vec4 color = vec4(0, 0, 0, 1);

  NdotL = max(dot(n, normalize(lightDir0)), 0.0);

  if (NdotL > 0.0) {
    if (Lights0.spot_cutoff != 180) {
      spotEffect = dot(normalize(Lights0.spot_direction), normalize(-lightDir0));
    } else {
      spotEffect = 1.0;
    }
      if (spotEffect > cos(Lights0.spot_cutoff)) {

        spotEffect = pow(spotEffect, Lights0.spot_exponent);
        att = spotEffect / (Lights0.constant +
              Lights0.linear * dist0 +
              Lights0.quadratic * dist0 * dist0);
        color += att * (diffuse0 * NdotL + ambient0);

        halfV = normalize(halfVector0);
        NdotHV = max(dot(n, halfV), 0.0);
        color += att * Material.specular * Lights0.specular * pow(NdotHV, Material.shininess);
      }

  }

  return color;
}

vec4 light1(in vec3 n)
{
  vec3 halfV, viewV, ldir;
  float NdotL, NdotHV;
  float att, spotEffect;
  vec4 color = vec4(0, 0, 0, 1);

  NdotL = max(dot(n, normalize(lightDir1)), 0.0);

  if (NdotL > 0.0) {
    if (Lights1.spot_cutoff != 180) {
      spotEffect = dot(normalize(Lights1.spot_direction), normalize(-lightDir1));
    } else {
      spotEffect = 1.0;
    }
      if (spotEffect > cos(Lights1.spot_cutoff)) {

        spotEffect = pow(spotEffect, Lights1.spot_exponent);
        att = spotEffect / (Lights1.constant +
              Lights1.linear * dist1 +
              Lights1.quadratic * dist1 * dist1);
        color += att * (diffuse1 * NdotL + ambient1);

        halfV = normalize(halfVector1);
        NdotHV = max(dot(n, halfV), 0.0);
        color += att * Material.specular * Lights1.specular * pow(NdotHV, Material.shininess);
      }

  }

  return color;
}

vec4 light2(in vec3 n)
{
  vec3 halfV, viewV, ldir;
  float NdotL, NdotHV;
  float att, spotEffect;
  vec4 color = vec4(0, 0, 0, 1);

  NdotL = max(dot(n, normalize(lightDir2)), 0.0);

  if (NdotL > 0.0) {
    if (Lights2.spot_cutoff != 180) {
      spotEffect = dot(normalize(Lights2.spot_direction), normalize(-lightDir2));
    } else {
      spotEffect = 1.0;
    }
      if (spotEffect > cos(Lights2.spot_cutoff)) {

        spotEffect = pow(spotEffect, Lights2.spot_exponent);
        att = spotEffect / (Lights2.constant +
              Lights2.linear * dist2 +
              Lights2.quadratic * dist2 * dist2);
        color += att * (diffuse2 * NdotL + ambient2);

        halfV = normalize(halfVector2);
        NdotHV = max(dot(n, halfV), 0.0);
        color += att * Material.specular * Lights2.specular * pow(NdotHV, Material.shininess);
      }

  }

  return color;
}

vec4 light3(in vec3 n)
{
  vec3 halfV, viewV, ldir;
  float NdotL, NdotHV;
  float att, spotEffect;
  vec4 color = vec4(0, 0, 0, 1);

  NdotL = max(dot(n, normalize(lightDir3)), 0.0);

  if (NdotL > 0.0) {
    if (Lights3.spot_cutoff != 180) {
      spotEffect = dot(normalize(Lights3.spot_direction), normalize(-lightDir3));
    } else {
      spotEffect = 1.0;
    }
      if (spotEffect > cos(Lights3.spot_cutoff)) {

        spotEffect = pow(spotEffect, Lights3.spot_exponent);
        att = spotEffect / (Lights3.constant +
              Lights3.linear * dist2 +
              Lights3.quadratic * dist3 * dist3);
        color += att * (diffuse3 * NdotL + ambient3);

        halfV = normalize(halfVector3);
        NdotHV = max(dot(n, halfV), 0.0);
        color += att * Material.specular * Lights3.specular * pow(NdotHV, Material.shininess);
      }

  }

  return color;
}

vec4 calculateLighting()
{
  vec4 color = vec4(0, 0, 0, 1);
  vec3 n = normalize(normal);

  if (UsedLights > 0) {
    color = color + light0(n);
  }

  if (UsedLights > 1) {
    color = color + light1(n);
  }

  if (UsedLights > 2) {
    color = color + light2(n);
  }

  if (UsedLights > 3) {
    color = color + light3(n);
  }

  return color;
}

